return {

  -- this used to be in ui.lua
  -- messages, cmdline and the popupmenu
  -- {
  --   "folke/noice.nvim",
  --   opts = function(_, opts)
  --     table.insert(opts.routes, {
  --       filter = {
  --         event = "notify",
  --         find = "No information available",
  --       },
  --       opts = { skip = true },
  --     })
  --     local focused = true
  --     vim.api.nvim_create_autocmd("FocusGained", {
  --       callback = function()
  --         focused = true
  --       end,
  --     })
  --     vim.api.nvim_create_autocmd("FocusLost", {
  --       callback = function()
  --         focused = false
  --       end,
  --     })
  --     table.insert(opts.routes, 1, {
  --       filter = {
  --         cond = function()
  --           return not focused
  --         end,
  --       },
  --       view = "notify_send",
  --       opts = { stop = false },
  --     })
  --
  --     opts.commands = {
  --       all = {
  --         -- options for the message history that you get with `:Noice`
  --         view = "split",
  --         opts = { enter = true, format = "details" },
  --         filter = {},
  --       },
  --     }
  --
  --     opts.presets.lsp_doc_border = true
  --   end,
  -- },

  -- {
  --   "rcarriga/nvim-notify",
  --   opts = {
  --     level = 3,
  --     timeout = 3000,
  --     background_colour = "#000000",
  --     render = "wrapped-compact",
  --   },
  -- },

  -- buffer line
  -- {
  --   "akinsho/bufferline.nvim",
  --   event = "VeryLazy",
  --   keys = {
  --     { "<Tab>", "<Cmd>BufferLineCycleNext<CR>", desc = "Next tab" },
  --     { "<S-Tab>", "<Cmd>BufferLineCyclePrev<CR>", desc = "Prev tab" },
  --   },
  --   opts = {
  --     options = {
  --       mode = "tabs",
  --       show_buffer_close_icons = false,
  --       show_close_icon = false,
  --     },
  --   },
  -- },
  -- this used to be in python.lua
  -- Setup null-ls with `black`
  -- {
  --   "nvimtools/none-ls.nvim",
  --   opts = function(_, opts)
  --     local nls = require("null-ls")
  --     opts.sources = vim.list_extend(opts.sources, {
  --       -- Order of formatters matters. They are used in order of appearance.
  --       nls.builtins.formatting.ruff,
  --       nls.builtins.formatting.black,
  --       -- nls.builtins.formatting.black.with({
  --       --   extra_args = { "--preview" },
  --       -- }),
  --       -- nls.builtins.diagnostics.ruff,
  --     })
  --   end,
  -- },

  -- this used to be in editor.lua
  -- {
  --   "nvim-telescope/telescope.nvim",
  --   priority = 1000,
  --   dependencies = {
  --     {
  --       "nvim-telescope/telescope-fzf-native.nvim",
  --       build = "make",
  --     },
  --     "nvim-telescope/telescope-file-browser.nvim",
  --   },
  --   keys = {
  --     {
  --       ";f",
  --       function()
  --         local builtin = require("telescope.builtin")
  --         builtin.find_files({
  --           no_ignore = false,
  --           hidden = true,
  --         })
  --       end,
  --       desc = "Lists files in your current working directory, respects .gitignore",
  --     },
  --     {
  --       ";r",
  --       function()
  --         local builtin = require("telescope.builtin")
  --         builtin.live_grep()
  --       end,
  --       desc = "Search for a string in your current working directory and get results live as you type, respects .gitignore",
  --     },
  --     {
  --       "\\\\",
  --       function()
  --         local builtin = require("telescope.builtin")
  --         builtin.buffers()
  --       end,
  --       desc = "Lists open buffers",
  --     },
  --     {
  --       ";;",
  --       function()
  --         local builtin = require("telescope.builtin")
  --         builtin.resume()
  --       end,
  --       desc = "Resume the previous telescope picker",
  --     },
  --     {
  --       ";e",
  --       function()
  --         local builtin = require("telescope.builtin")
  --         builtin.diagnostics()
  --       end,
  --       desc = "Lists Diagnostics for all open buffers or a specific buffer",
  --     },
  --     {
  --       ";s",
  --       function()
  --         local builtin = require("telescope.builtin")
  --         builtin.treesitter()
  --       end,
  --       desc = "Lists Function names, variables, from Treesitter",
  --     },
  --     {
  --       "sf",
  --       function()
  --         local telescope = require("telescope")
  --
  --         local function telescope_buffer_dir()
  --           return vim.fn.expand("%:p:h")
  --         end
  --
  --         telescope.extensions.file_browser.file_browser({
  --           path = "%:p:h",
  --           cwd = telescope_buffer_dir(),
  --           respect_gitignore = false,
  --           hidden = true,
  --           grouped = true,
  --           previewer = false,
  --           initial_mode = "normal",
  --           layout_config = { height = 40 },
  --         })
  --       end,
  --       desc = "Open File Browser with the path of the current buffer",
  --     },
  --   },
  --   config = function(_, opts)
  --     local telescope = require("telescope")
  --     local actions = require("telescope.actions")
  --     local fb_actions = require("telescope").extensions.file_browser.actions
  --
  --     opts.defaults = vim.tbl_deep_extend("force", opts.defaults, {
  --       wrap_results = true,
  --       layout_strategy = "horizontal",
  --       layout_config = { prompt_position = "top" },
  --       sorting_strategy = "ascending",
  --       winblend = 0,
  --       mappings = {
  --         n = {},
  --       },
  --     })
  --     opts.pickers = {
  --       diagnostics = {
  --         theme = "ivy",
  --         initial_mode = "normal",
  --         layout_config = {
  --           preview_cutoff = 9999,
  --         },
  --       },
  --     }
  --     opts.extensions = {
  --       file_browser = {
  --         theme = "dropdown",
  --         -- disables netrw and use telescope-file-browser in its place
  --         hijack_netrw = true,
  --         mappings = {
  --           -- your custom insert mode mappings
  --           ["n"] = {
  --             -- your custom normal mode mappings
  --             ["N"] = fb_actions.create,
  --             ["h"] = fb_actions.goto_parent_dir,
  --             ["<C-u>"] = function(prompt_bufnr)
  --               for i = 1, 10 do
  --                 actions.move_selection_previous(prompt_bufnr)
  --               end
  --             end,
  --             ["<C-d>"] = function(prompt_bufnr)
  --               for i = 1, 10 do
  --                 actions.move_selection_next(prompt_bufnr)
  --               end
  --             end,
  --           },
  --         },
  --       },
  --     }
  --     telescope.setup(opts)
  --     require("telescope").load_extension("fzf")
  --     require("telescope").load_extension("file_browser")
  --   end,
  -- },
}
